"use strict";
/*
 * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ask_sdk_runtime_1 = require("ask-sdk-runtime");
var CustomSkill_1 = require("../CustomSkill");
var BaseSkillFactory = /** @class */ (function () {
    function BaseSkillFactory() {
    }
    BaseSkillFactory.init = function () {
        var runtimeConfigurationBuilder = new ask_sdk_runtime_1.RuntimeConfigurationBuilder();
        var thisCustomUserAgent;
        var thisSkillId;
        return {
            addRequestHandler: function (matcher, executor) {
                var canHandle = typeof matcher === 'string'
                    ? function (_a) {
                        var requestEnvelope = _a.requestEnvelope;
                        return matcher === (requestEnvelope.request.type === 'IntentRequest'
                            ? requestEnvelope.request.intent.name
                            : requestEnvelope.request.type);
                    }
                    : matcher;
                runtimeConfigurationBuilder.addRequestHandler(canHandle, executor);
                return this;
            },
            addRequestHandlers: function () {
                var requestHandlers = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    requestHandlers[_i] = arguments[_i];
                }
                runtimeConfigurationBuilder.addRequestHandlers.apply(runtimeConfigurationBuilder, requestHandlers);
                return this;
            },
            addRequestInterceptors: function () {
                var executors = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    executors[_i] = arguments[_i];
                }
                runtimeConfigurationBuilder.addRequestInterceptors.apply(runtimeConfigurationBuilder, executors);
                return this;
            },
            addResponseInterceptors: function () {
                var executors = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    executors[_i] = arguments[_i];
                }
                runtimeConfigurationBuilder.addResponseInterceptors.apply(runtimeConfigurationBuilder, executors);
                return this;
            },
            addErrorHandler: function (matcher, executor) {
                runtimeConfigurationBuilder.addErrorHandler(matcher, executor);
                return this;
            },
            addErrorHandlers: function () {
                var errorHandlers = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    errorHandlers[_i] = arguments[_i];
                }
                runtimeConfigurationBuilder.addErrorHandlers.apply(runtimeConfigurationBuilder, errorHandlers);
                return this;
            },
            withCustomUserAgent: function (customUserAgent) {
                thisCustomUserAgent = customUserAgent;
                return this;
            },
            withSkillId: function (skillId) {
                thisSkillId = skillId;
                return this;
            },
            getSkillConfiguration: function () {
                var runtimeConfiguration = runtimeConfigurationBuilder.getRuntimeConfiguration();
                return __assign({}, runtimeConfiguration, { customUserAgent: thisCustomUserAgent, skillId: thisSkillId });
            },
            create: function () {
                return new CustomSkill_1.CustomSkill(this.getSkillConfiguration());
            },
            lambda: function () {
                var skill = new CustomSkill_1.CustomSkill(this.getSkillConfiguration());
                return function (event, context, callback) {
                    skill.invoke(event, context)
                        .then(function (response) {
                        callback(null, response);
                    })
                        .catch(function (err) {
                        callback(err, null);
                    });
                };
            },
        };
    };
    return BaseSkillFactory;
}());
exports.BaseSkillFactory = BaseSkillFactory;
//# sourceMappingURL=BaseSkillFactory.js.map